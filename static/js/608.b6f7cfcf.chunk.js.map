{"version":3,"file":"static/js/608.b6f7cfcf.chunk.js","mappings":"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","sources":["apis/photoAPI.ts","componenets/UI/Image/ImageSkeleton.tsx","hooks/useIsImageLoaded.ts","componenets/UI/input/Input.tsx","componenets/UI/link/IconLink.tsx","componenets/UI/link/SubmitLink.tsx","componenets/UI/skeletonElement/SkeletonElement.tsx","componenets/UI/title/CrossedTitle.tsx","hooks/useFetching.ts","hooks/useInitializeCSSVariable.ts","hooks/useMediaQuery.ts","hooks/useReactiveVariable.ts"],"sourcesContent":["type OrientationType = \"landscape\" | \"portrait\" | \"square\";\r\ntype SizeType = \"large\" | \"medium\" | \"small\";\r\n\r\ntype PhotosParams = {\r\n  query: string;\r\n  amount: number;\r\n\tpage?: number,\r\n  orientation?: OrientationType;\r\n  size?: SizeType;\r\n  color?: string;\r\n};\r\n\r\n\r\nexport class PhotoAPI {\r\n  static async fetchPhotos({\r\n    query,\r\n    amount,\r\n\t\tpage,\r\n    size,\r\n    orientation,\r\n    color,\r\n  }: PhotosParams) {\r\n    const response = await fetch(\r\n      `https://api.pexels.com/v1/search?\r\n\t\t\tquery=${query}\r\n\t\t\t&per_page=${amount}\r\n\t\t\t${page ? \"&page=\" + page : \"\"}\r\n\t\t\t${size ? \"&size=\" + size : \"\"}\r\n\t\t\t${orientation ? \"&orientation=\" + orientation : \"\"}\r\n\t\t\t${color ? \"&color=\" + color : \"\"}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization:\r\n            \"NbdqIOBp8joqQ7sN65U05Ffnj64ucXNhNxKBFAv0RMub83isPhIK0i6k\",\r\n        },\r\n      }\r\n    );\r\n    const photos = await response.json();\r\n    return photos as SearchImageResult;\r\n  }\r\n}\r\n\r\nexport type PhotoType = {\r\n  id: number;\r\n  width: number;\r\n  height: number;\r\n  url: string;\r\n  photographer: string;\r\n  photographer_url: string;\r\n  photographer_id: string;\r\n  avg_color: string;\r\n  src: {\r\n    original: string;\r\n    large2x: string;\r\n    large: string;\r\n    medium: string;\r\n    small: string;\r\n    portrait: string;\r\n    landscape: string;\r\n    tiny: string;\r\n  };\r\n  liked: boolean;\r\n  alt: string;\r\n};\r\n\r\nexport type SearchImageResult = {\r\n  total_results: number;\r\n  page: number;\r\n  per_page: number;\r\n  photos: PhotoType[];\r\n  next_page: string;\r\n};","import React, { useEffect, useRef, useState } from 'react'\r\nimport \"./Image.scss\";\r\nimport { setCSSVariable } from '../../../utils/functions';\r\nimport { useIsImageLoaded } from '../../../hooks/useIsImageLoaded';\r\nimport { useInitializeCSSVariable } from '../../../hooks/useInitializeCSSVariable';\r\n\r\ntype Props = React.ImgHTMLAttributes<HTMLImageElement> & {\r\n\tclassName?: string,\r\n\timgFit?: \"cover\" | \"contain\",\r\n\tskeletonColor?: string,\r\n\tsmallResolutionSrc?: string, \r\n}\r\n\r\nconst ImageSkeleton = ({ className, imgFit = \"cover\", src, skeletonColor, ...imgAttributes }: Props) => {\r\n\tconst imgLoaded = useIsImageLoaded(src);\r\n\tconst skeletonElementRef = useRef(null);\r\n\tuseInitializeCSSVariable(skeletonElementRef, \"--skeleton-color\", skeletonColor);\r\n\r\n\treturn (\r\n\t\t<div className={`image image-skeleton ${className ? className : \"\"} ${!imgLoaded ? \"isLoading\" : \"\"}`}>\r\n\t\t\t{imgLoaded\r\n\t\t\t\t?\r\n\t\t\t\t< img\r\n\t\t\t\t\tloading='lazy'\r\n\t\t\t\t\tsrc={src}\r\n\t\t\t\t\t{...imgAttributes}\r\n\t\t\t\t\tclassName='image__content'\r\n\t\t\t\t\tstyle={{ objectFit: imgFit }} />\r\n\t\t\t\t:\r\n\t\t\t\t<div ref={skeletonElementRef} className='image__content-skeleton' ></div>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ImageSkeleton;","import { useState, useEffect } from \"react\";\r\n\r\nexport function useIsImageLoaded(src: string | undefined): boolean {\r\n\t\r\n\tconst [loaded, setLoaded] = useState(false);\r\n  useEffect(() => {\r\n\t\tif (!src) return;\r\n    const img = document.createElement(\"img\");\r\n    img.src = src;\r\n    img.onload = () => {\r\n\t\t\tsetLoaded(true);\r\n    };\r\n  }, [src]);\r\n\r\n  return loaded;\r\n}\r\n","import React from 'react'\r\nimport \"./Input.scss\";\r\ntype Props = React.InputHTMLAttributes<HTMLInputElement> & {\r\n\tchildren?: React.ReactNode,\r\n\tclassName?: string,\r\n}\r\n\r\nfunction Input({ children, className, ...args }: Props) {\r\n\treturn (\r\n\t\t<input className={`input ${className ? className : \"\"}`} {...args}>{children}</input>\r\n\t)\r\n}\r\n\r\nexport default Input;","import React from 'react'\r\nimport \"./Link.scss\";\r\nimport { Link } from 'react-router-dom';\r\ntype Props = {\r\n\tchildren?: React.ReactNode,\r\n\tclassName?: string,\r\n}\r\ntype FinalProps =\r\n\t| Props & { to: string, href?: string }\r\n\t| Props & { to?: string, href: string }\r\n\r\n\r\nfunction IconLink({ children, className, to, href }: FinalProps) {\r\n\tif (to) {\r\n\t\treturn <Link to={to} className={`link-icon ${className ? className : \"\"}`} > {children}</Link >\r\n\t}\r\n\treturn <a href={href} className={`link-icon ${className ? className : \"\"}`}>{children}</a>\r\n}\r\n\r\nexport default IconLink;","import React from 'react'\r\nimport \"./Link.scss\";\r\nimport { Link } from 'react-router-dom';\r\ntype Props = {\r\n\tchildren?: React.ReactNode,\r\n\tclassName?: string,\r\n}\r\ntype FinalProps =\r\n\t| Props & { to: string, href?: string }\r\n\t| Props & { to?: string, href: string }\r\n\r\n\r\nfunction SubmitLink({ children, className, to, href }: FinalProps) {\r\n\tif (to) {\r\n\t\treturn <Link to={to} className={`submit-link ${className ? className : \"\"}`} > {children}</Link >\r\n\t}\r\n\treturn <a href={href} className={`submit-link ${className ? className : \"\"}`}>{children}</a>\r\n}\r\n\r\nexport default SubmitLink;","import React, { useRef } from 'react'\r\nimport \"./SkeletonElement.scss\";\r\nimport { useInitializeCSSVariable } from '../../../hooks/useInitializeCSSVariable';\r\ntype Props = {\r\n\tskeletonColor?: string,\r\n\tclassName?: string,\r\n}\r\n\r\nfunction SkeletonElement({ skeletonColor, className }: Props) {\r\n\tconst skeletonRef = useRef<HTMLDivElement | null>(null);\r\n\tuseInitializeCSSVariable(skeletonRef, \"--skeleton-color\", skeletonColor);\r\n\treturn (\r\n\t\t<div ref={skeletonRef} className={`skeleton-element ${className ? className : \"\"}`}></div>\r\n\t)\r\n}\r\n\r\nexport default SkeletonElement","import React from 'react'\r\nimport \"./Title.scss\";\r\ntype Props = {\r\n\tchildren: React.ReactElement,\r\n\tclassName?: string,\r\n}\r\n\r\nfunction CrossedTitle({ children, className }: Props) {\r\n\treturn (\r\n\t\t<div className={`crossed-header ${className ? className : \"\"}`}>\r\n\t\t\t<div className={`crossed-header__text`}>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default CrossedTitle","import { useState } from 'react';\r\n\r\ntype Callback = (...args: any[]) => Promise<any>;\r\n\r\nexport function useFetching<T extends Callback>\r\n\t(callback: T, initialIsLoading = false): [(...args: Parameters<T>) => Promise<void>, boolean, Error | null] {\r\n\r\n\tconst [isLoading, setIsLoading] = useState(initialIsLoading);\r\n\tconst [error, setError] = useState<Error | null>(null);\r\n\tconst fetching = async (...args: Parameters<T>) => {\r\n\t\ttry {\r\n\t\t\tsetIsLoading(true);\r\n\t\t\tawait callback(...args);\r\n\t\t} catch (e) {\r\n\t\t\tif (e instanceof Error) {\r\n\t\t\t\tsetError(e);\r\n\t\t\t} else {\r\n\t\t\t\tsetError(new Error('Unknown error occurred'));\r\n\t\t\t}\r\n\t\t} finally {\r\n\t\t\tsetIsLoading(false);\r\n\t\t}\r\n\t};\r\n\treturn [fetching, isLoading, error];\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { setCSSVariable } from \"../utils/functions\";\r\n\r\nexport function useInitializeCSSVariable(\r\n  ref: React.MutableRefObject<unknown>,\r\n  varName: string,\r\n  value: string | undefined\r\n) {\r\n  useEffect(() => {\r\n    if (!value) return;\r\n    setCSSVariable(ref, varName, value);\r\n  }, []);\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { useReactiveVariable } from \"./useReactiveVariable\";\r\n\r\nexport const useMediaQuery = (\r\n  query: string,\r\n  callback: Function = () => {}\r\n): [boolean, React.MutableRefObject<any>] => {\r\n\tconst [matches, matchesRef, setMatches] = useReactiveVariable(false);\r\n\r\n  const handleChange = (e: MediaQueryListEvent) => {\r\n    setMatches(e.matches);\r\n    if (callback && e.matches) {\r\n      callback(e);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const m = window.matchMedia(query);\r\n\r\n    setMatches(m.matches);\r\n\r\n    m.addEventListener(\"change\", handleChange);\r\n\r\n    return () => {\r\n      m.removeEventListener(\"change\", handleChange);\r\n    };\r\n  }, []);\r\n\r\n  return [matches, matchesRef];\r\n};\r\n","import { useState, useRef, MutableRefObject } from \"react\";\r\n\r\nexport function useReactiveVariable<T>(startValue: T): [T, MutableRefObject<T>, (value: T) => void] {\r\n  const [renderValue, setRenderValue] = useState<T>(startValue);\r\n  const currentValue = useRef<T>(renderValue);\r\n\r\n  function setValue(value: T) {\r\n    setRenderValue(value);\r\n    currentValue.current = value;\r\n  }\r\n\r\n  return [renderValue, currentValue, setValue];\r\n}"],"names":["PhotoAPI","fetchPhotos","_ref","query","amount","page","size","orientation","color","response","fetch","concat","method","headers","Authorization","json","className","imgFit","src","skeletonColor","imgAttributes","imgLoaded","loaded","setLoaded","useState","useEffect","img","document","createElement","onload","useIsImageLoaded","skeletonElementRef","useRef","useInitializeCSSVariable","_jsx","children","loading","style","objectFit","ref","args","to","href","_jsxs","Link","skeletonRef","useFetching","callback","initialIsLoading","arguments","length","undefined","isLoading","setIsLoading","error","setError","async","e","Error","varName","value","setCSSVariable","useMediaQuery","matches","matchesRef","setMatches","useReactiveVariable","handleChange","m","window","matchMedia","addEventListener","removeEventListener","startValue","renderValue","setRenderValue","currentValue","current"],"sourceRoot":""}