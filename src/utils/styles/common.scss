@use "sass:math";

//Percent
@function percent($px, $from: 100) {
  $result: math.div($px, $from) * 100%;
  @return $result;
}
//REM
@function toRem($px, $current: 16) {
  $result: math.div($px, $current) + rem;
  @return $result;
}
//EM
@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result;
}

@import url("https://fonts.googleapis.com/css2?family=Island+Moments&family=Jost:ital,wght@0,100..900;1,100..900&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");
// За замовчуванням шрифт ==============================================================================================================================================================================================================================================================================
$fontFamily: "Montserrat";
$fontSize: 1rem;

// Основні кольори
$darkOrangeColor: #ff7e01;
$lightOrangeColor: #faa935;
$darkGreenColor: #0b2727;
$greyColor: #6e7074;
$lightGreyColor: #d9d9d9;
$lightRedColor: #ee6e6e;
$lightBlueColor: #cae5f4;
$darkWhiteColor: #ffffff;

// Мінімальна ширина сторінки
$minWidth: 320;
// Ширина полотна (макету)
$maxWidth: 1440;
// Ширина обмежуючого контейнера
$maxWidthContainer: 1120;
$mobileWidth: 767.98;
// Загальний відступ у контейнера
$containerPadding: 30;
$halfContainerPadding: 15;

// Ширина спрацьовування першого брейкпоінту
$containerWidth: $maxWidthContainer + $containerPadding;

// Брейк-поїнти
$pc: em(
  $containerWidth
); // ПК, ноутбуки, деякі планшети у горизонтальному положенні
$tablet: em(991.98); // Планшети, деякі телефони в горизонтальному положенні
$mobile: em(767.98); // Телефони L
$mobileSmall: em(479.98); // Телефони S

// extend classes
@mixin linkHover1($linkColor) {
  transition: color 0.3s;
  @media (any-hover: hover) {
    &:hover {
      color: $linkColor;
    }
  }
}

@mixin styleLink2 {
	border-radius: toRem(21);
  padding: toRem(6) toRem(17);
  background-color: transparent;
  color: $darkGreenColor;
  border: 2px solid transparent;
	transition: background 0.3s ease, color 0.3s ease, border 0.3s ease;
}
@mixin activeLink2($linkColor) {
  background-color: $linkColor;
  color: $darkWhiteColor;
  border: 2px solid $linkColor;
}

@mixin hoverLink2($linkColor) {
  @media (any-hover: hover) {
    &:hover {
      background-color: transparent;
      color: $linkColor;
    }
  }
}

@mixin styleLink3($linkColor) {
  position: relative;
  padding-left: 0;
  transition: padding 0.3s ease, color 0.3s ease;
  &::before {
    content: "";
    top: 0;
    left: 0;
    position: absolute;
    width: 3px;
    height: 100%;
    background-color: transparent;
    transition: background-color 0.3s ease;
  }
	@media (any-hover: hover) {
    &:hover {
      color: $lightOrangeColor;
    }
  }
}

@mixin activeLink3 ($linkColor) {
  padding-left: 15px;
  &::before {
    background-color: $linkColor;
  }
}

%ic {
  font-family: "icons";
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

%skeleton-animation {
  position: relative;
  overflow: hidden;
  display: inline-block;
  background-color: $greyColor;

  &::after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    transform: translate(-100%);
    background-image: linear-gradient(
      90deg,
      rgba(#fff, 0) 0,
      rgba(#fff, 0.2) 20%,
      rgba(#fff, 0.5) 60%,
      rgba(#fff, 0)
    );
    animation: shimmer 4s infinite;
    content: "";
  }

  @keyframes shimmer {
    100% {
      transform: translate(100%);
    }
  }
}

// for image to cover
[class*="-ibg"] {
  position: relative;
  img {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    object-fit: cover;
  }
}

// Адаптивна властивість (clamp)
@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $keepSize: 0,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth
) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  // Для calc();
  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  // Брейк-поїнти в EM
  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // Формула плаваючого значення
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }
  $flyValue: #{toRem($yIntersection)}" + " #{$slope * 100}vw;

  // Отримання значення властивості
  $propertyValue: #{"clamp(" toRem($minSize) "," $flyValue "," toRem($startSize)
    ")"};
  // Якщо негативні значення
  @if ($minSize > $startSize) {
    $propertyValue: #{"clamp("
      toRem($startSize)
      ","
      $flyValue
      ","
      toRem($minSize)
      ")"};
  }

  // Встановлюємо значення за замовчуванням
  @if $keepSize != 1 and $keepSize != 3 {
    @media (min-width: $widthFromMedia) {
      #{$property}: toRem($startSize);
    }
  }
  // Адаптуємо розмір у проміжку між зазначеними ширинами в'юпорту
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    // Якщо підтримується clamp();
    @supports (#{$property}: $propertyValue) {
      #{$property}: $propertyValue;
    }
    // Якщо не підтримується clamp();
    @supports not (#{$property}: $propertyValue) {
      #{$property}: calc(
        #{toRem($minSize)} + #{$addSize} * (100vw - #{toRem($widthTo)}) / #{math.div(
            $widthFrom,
            16
          ) - math.div($widthTo, 16)}
      );
    }
  }
  @if $keepSize != 1 and $keepSize != 2 {
    @media (max-width: $widthToMedia) {
      #{$property}: toRem($minSize);
    }
  }
}
